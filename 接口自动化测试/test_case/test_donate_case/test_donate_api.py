import datetime
import sys
import os
from pandas import DataFrame

from test_case.page_api.donate.donate_api import DonateApi

sys.path.append(os.getcwd())
sys.path.append("..")

import pytest

@pytest.mark.donate
class TestDonate:

    def setup_class(self):
        self.doante = DonateApi()
        self.authorization = self.game.get_authorization()

    @pytest.mark.release
    def test_donate_positive_createdonateorder_ok(self):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-Ê≠£ÂêëÁî®‰æã"""
        res = self.donate.createdonateorder(authorization=self.authorization, request='')
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

    @pytest.mark.release
    @pytest.mark.parametrize(
        'input_param, desc, value',
        [
            ('unauthorized', 'Êú™ÁôªÂΩï', 'missing'),
            ('no_auth', 'Á©∫token', ''),
            ('expired_token', 'Èâ¥ÊùÉÂºÇÂ∏∏-expired_token', 'expired_token'),
            ('invalid_token', 'Èâ¥ÊùÉÂºÇÂ∏∏-invalid_token', 'invalid_token'),
        ]
    )
    def test_donate_permission_createdonateorder(self, input_param, desc, value):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-{desc}"""
        # Èâ¥ÊùÉ‰Ωú‰∏∫‰ΩçÁΩÆÂèÇÊï∞Áõ¥Êé•‰º†ÂÖ•ÔºàÁ§∫‰æãÊúüÊúõÁöÑÊûÅÁÆÄÈ£éÊ†ºÔºâ
        res = self.donate.createdonateorder(input_param, request='')
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

    @pytest.mark.release
    @pytest.mark.parametrize(
        'input_param, desc, value',
        [
            ('missing', 'Áº∫Â§±',  'missing'),
            ('empty', '‰∏∫Á©∫', "''"),
            ('null', 'None', None),
        ]
    )
    def test_donate_required_createdonateorder_request(self, input_param, desc, value):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-ÂøÖÂ°´Â≠óÊÆµÊµãËØï-{desc}(request)"""
        if desc == 'missing':
            pl, request = {'pop_items': 'request'}, 0
        else:
            pl, request = {}, value
        res = self.donate.createdonateorder(authorization=self.authorization, **pl)
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

    @pytest.mark.release
    @pytest.mark.parametrize(
        'input_param, desc, value',
        [
            ('integer', 'Êï¥Êï∞', 123),
            ('float', 'ÊµÆÁÇπÊï∞', 12.34),
            ('boolean', 'Â∏ÉÂ∞îÂÄº', True),
            ('array', 'Êï∞ÁªÑ', [1, 2, 3]),
            ('object', 'ÂØπË±°', {'key': 'value'}),
            ('special_chars', 'ÁâπÊÆäÂ≠óÁ¨¶', '"!@#$%^&*()"'),
            ('email_format', 'ÈÇÆÁÆ±Ê†ºÂºè', '"test@example.com"'),
            ('phone_format', 'ÊâãÊú∫Âè∑Ê†ºÂºè', '"13800138000"'),
            ('date_format', 'Êó•ÊúüÊ†ºÂºè', '"2023-12-25"'),
            ('emoji', 'Ë°®ÊÉÖÁ¨¶Âè∑', '"üòÄüéâüöÄ"'),
            ('long_string', 'Ë∂ÖÈïøÂ≠óÁ¨¶‰∏≤', '"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"'),
            ('unicode', 'UnicodeÂ≠óÁ¨¶', '"‰∏≠ÊñáÊµãËØï"'),
            ('sql_injection', 'SQLÊ≥®ÂÖ•', '"\'; DROP TABLE users; --"'),
            ('xss', 'XSSÊîªÂáª', '"<script>alert(1)</script>"'),
            ('json_string', 'JSONÂ≠óÁ¨¶‰∏≤', '"{\\"key\\": \\"value\\"}"'),
            ('xml_string', 'XMLÂ≠óÁ¨¶‰∏≤', '"<root><item>test</item></root>"'),
            ('url_string', 'URLÂ≠óÁ¨¶‰∏≤', '"https://www.example.com"'),
            ('base64_string', 'Base64Â≠óÁ¨¶‰∏≤', '"SGVsbG8gV29ybGQ="'),
        ]
    )
    def test_donate_format_createdonateorder_request(self, input_param, desc, value):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-Êï∞ÊçÆÊ†ºÂºèÊµãËØï-{desc}(request)"""
        res = self.donate.createdonateorder(self.authorization, request=value)
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

    @pytest.mark.release
    @pytest.mark.parametrize(
        'input_param, desc, value',
        [
            ('shortest', 'ÊúÄÁü≠ÈïøÂ∫¶', ""),
            ('longest', 'ÊúÄÈïøÈïøÂ∫¶', "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
        ]
    )
    def test_donate_boundary_createdonateorder_request(self, input_param, desc, value):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-ËæπÁïåÂÄºÊµãËØï-{desc}(request)"""
        res = self.donate.createdonateorder(self.authorization, request=value)
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

    @pytest.mark.release
    def test_donate_scenario_createdonateorder_invalid_request(self):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-Âú∫ÊôØÂºÇÂ∏∏-Êó†ÊïàÁöÑrequest"""
        test_params = {}
        test_params['request'] = 'INVALID_VALUE'
        res = self.donate.createdonateorder(authorization=self.authorization, **test_params)
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

    @pytest.mark.release
    @pytest.mark.parametrize(
        'test_type,test_desc,attack_value',
        [
            ('sql_injection', 'SQLÊ≥®ÂÖ•', "' OR 1=1 --"),
            ('xss_attack', 'XSSÊîªÂáª', "<script>alert('xss')</script>"),
        ]
    )
    def test_donate_security_createdonateorder_request(self, test_type, test_desc, attack_value):
        """ÂàõÂª∫ÊçêËµ†ËÆ¢Âçï-ÂÆâÂÖ®ÊµãËØï-{test_desc}(request)"""
        test_params = {}
        test_params['request'] = attack_value
        res = self.donate.createdonateorder(authorization=self.authorization, **test_params)
        assert isinstance(res, dict), f'Êé•Âè£ËøîÂõûÁ±ªÂûãÂºÇÂ∏∏: {type(res)}'
        assert 'data' in res, f'ËøîÂõûÁªìÊûúÊ≤°ÊúâdataÊï∞ÊçÆÔºåresponse->{res}'

